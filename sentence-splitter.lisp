(in-package #:nlp)

(defvar +eos+ #\Nul)
(defparameter *punctuation* "([.!?])")
(defparameter *post-punctuation* "[.!?](\\?|:|'|\\\"|\\)|\\]|\\})?")

(defparameter *people*
  '("jr" "mr" "mrs" "ms" "dr" "prof" "sr" "sens?" "reps?" "gov" "attys?"
    "supt"  "det" "rev"))
(defparameter *army*
  '("col" "gen" "lt" "cmdr" "adm" "capt" "sgt" "cpl" "maj"))
(defparameter *institutes* '("dept" "univ" "assn" "bros"))
(defparameter *company* '("inc" "ltd" "co" "corp" "llp" "llc"))
(defparameter *places*
  '("arc" "al" "ave" "blv?d" "cl" "ct" "cres" "dr" "expy?"
    "dist" "mt" "ft"
    "fw?y" "hwa?y" "la" "pde?" "pl" "plz" "rd" "st" "tce"))
(defparameter *states*
  '("Ala" "Ariz" "Ark" "Cal" "Calif" "Col" "Colo" "Conn"
    "Del" "Fed" "Fla" "Ga" "Ida" "Id" "Ill" "Ind" "Ia"
    "Kan" "Kans" "Ken" "Ky" "La" "Me" "Md" "Is" "Mass"
    "Mich" "Minn" "Miss" "Mo" "Mont" "Neb" "Nebr" "Nev"
    "Mex" "Okla" "Ok" "Ore" "Penna" "Penn" "Pa" "Dak"
    "Tenn" "Tex" "Ut" "Vt" "Va" "Wash" "Wis" "Wisc" "Wy"
    "Wyo" "USAFA" "Alta" "Man" "Ont" "Qué" "Sask" "Yuk"))
(defparameter *months*
  '("jan" "feb" "mar" "apr" "may" "jun" "jul" "aug" "sep" "oct" "nov" "dec"
    "sept"))
(defparameter *misc* '("vs" "etc" "no" "esp"))

(let ((nl-scanner (create-scanner (format nil "\\n\s*\\n")))
      (pp-scanner (create-scanner (format nil "(~A)(\\s+|$)"
					  *post-punctuation*)))
      (p-scanner (create-scanner (format nil "\\s\\w~A" *punctuation*))))
  (defun mark-sentence-boundaries (text)
    "Make a first pass at marking sentence boundaries"
    (let ((new-text nil))
      (setq new-text
	    (regex-replace-all nl-scanner text (format nil "~A" +eos+)))
      (setq new-text
	    (regex-replace-all pp-scanner
			       new-text
			       (format nil "\\\1~A" +eos+)))
      (setq new-text
	    (regex-replace-all p-scanner
			       new-text
			       (format  nil "\\\&~A" +eos+)))
      new-text)))

(let ((abbr-scanner-nocase
       (create-scanner
        (let ((r (with-output-to-string (regex)
                   (format regex "[^\\\w](")
                   (format regex "~{~A~^|~}"
                           (append *people* *months* *misc* *company* *army*
                                   *institutes* *places*))
                   (format regex ")~A~A" *punctuation* +eos+))))
          r)
	:multi-line-mode t
	:case-insensitive-mode t))
      (abbr-scanner-case
       (create-scanner
	(format nil "(~{~A~^|~})~A~A" *states* *punctuation* +eos+)
	:case-insensitive-mode nil
	:multi-line-mode t)))
  (defun remove-false-boundaries (text)
    "Correct any bad boundaries that were generated by mark-sentence-boundaries"
    (setq text
	  (regex-replace-all
	   (format nil "([^-\\w]\\w~A\\s)~A" *post-punctuation* +eos+) text "\\1"))
    (setq text
	  (regex-replace-all
	   (format nil "([^-\\w]\\w~A)~A" *punctuation* +eos+) text "\\1"))
    (setq text
	  (regex-replace-all (format nil "(\\s\\w\.\\s+)~A" +eos+) text "\\1"))
    (setq text
	  (regex-replace-all (format nil "(\.\.\. )~A([a-z])" +eos+) text "\\1\\2"))
    (setq text
	  (regex-replace-all (format nil "(['\\\"]~A['\\\"]\\s+)~A" *punctuation* +eos+)
			     text "\\1 "))
    (setq text
	  (regex-replace-all (format nil "([\\\"']\\s*)~A(\\s*[a-z])" +eos+)
			     text "\\1 \\2"))
    (setq text (regex-replace-all (format nil "(\\s\.\\s)~A(\\s*)" +eos+)
				  text "\\1\\2"))
    (setq text (regex-replace-all (format nil "(\\s~A\\s)~A" *post-punctuation* +eos+)
				  text "\\1"))
    (setq text (regex-replace-all abbr-scanner-nocase text "\\1\\2 "))
    (setq text (regex-replace-all abbr-scanner-case text "\\1\\2 "))
    text))

(let ((eos-scanner (create-scanner (format nil "~A" +eos+))))
  (defun split-sentences (text)
    "Split text into sentences"
    (mapcar (lambda (s)
              (regex-replace-all "(^\\s+|\\s+$)" s ""))
	    (split eos-scanner
		   (remove-false-boundaries
		    (mark-sentence-boundaries text))))))

(defun split-contractions (word &optional (pos-db *pos-db*))
  (gethash word (pos-contraction-table pos-db)))

(defun tokenize (text)
  "Split text into tokens"
  (let ((text (cl-ppcre:regex-replace "(’|´)" (cl-ppcre:regex-replace "\\s+$" text "") "'"))
        (final-quote nil))
    (setq text (regex-replace-all "([\\.\\?\\!])([\'\"])$" text " \\1 \\2 "))
    (setq text (regex-replace-all "(,)(['\\\"])" text "\\1 \\2"))
    (setq text (regex-replace-all "((^| )')([^']+)('( |$))" text " `` \\3 '' "))
    (setq text (regex-replace-all "(\")([^\"]+)(\")" text "`` \\2 '' "))
    (setq text (regex-replace-all "([^,])(,)" text "\\1 \\2 "))
    (setq text (regex-replace-all "([^;\\s])(;)" text "\\1 \\2 "))
    (setq text (regex-replace-all "([^:\\s(http)(https)(ftp)])(:)" text "\\1 \\2"))
    (setq text (regex-replace-all "(^| )(\\w+)(')( |$)" text "\\1\\2 \\3\\4"))
    ;;(setq text (regex-replace-all "(\\()([\\w+ ]+)(\\))" text "\\1 \\2 \\3"))
    (setq text (regex-replace-all "(\\()" text "\\1 "))
    ;;(setq text (regex-replace-all "([\\)\\.\\?\\!]{1})" text " \\1 "))
    (setq text (regex-replace-all "(\\))" text " \\1 "))
    (when (scan "[\\.\\?\\!] ''$" text)
      (setq final-quote t)
      (setq text (regex-replace-all " ''$" text "")))
    (let ((punctuation
	   (cl-ppcre:scan-to-strings "[\\.\\?\\!]$" text)))
      (when punctuation
	(setq text (subseq text 0 (1- (length text)))))
      (flatten
       (mapcar (lambda (word)
                 (cond ((cl-ppcre:scan "\\'s$" word)
                        (list (cl-ppcre:regex-replace "\\'s$" word "")
                              "'s"))
                       ((cl-ppcre:scan "\\'d$" word)
                        (list (cl-ppcre:regex-replace "\\'d$" word "")
                              "'d"))
                       (t
                        (or (split-contractions word) (list word)))))
               (append (cl-ppcre:split "\\s+" text)
                       (when punctuation (list punctuation))
                       (when final-quote (list "''"))))))))
