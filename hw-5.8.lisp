(qi:quickload :nlp)
(ql:quickload :cl-ppcre)
(ql:quickload :trivial-shell)

(in-package :nlp)

(defun match? (a b)
  (or (eql a b)
      (let ((a-list (cl-ppcre:split "\\|" (symbol-name a)))
	    (b-list (cl-ppcre:split "\\|" (symbol-name b))))
	(dolist (a a-list)
	  (when (member a b-list :test 'equalp)
	    (return-from match? t)))
	(dolist (b b-list)
	  (when (member b a-list :test 'equalp)
	    (return-from match? t))))))

(defun hw-5.8 (&optional
                 (train "data/train-pos.txt")
                 (test "data/test-pos.txt")
                 (lex "data/all-pos.txt"))
  (format t "Training...~%")
  (build-nlp :pos-train train
             :pos-lex train
             :moby-file "data/moby/mobypos.txt")
  ;;(train-tagger train *pos-db*)
  (format t "Tagging...~%")
  (let ((total-words 0)
	(total-correct 0)
	(error-count 0)
	(errors (make-hash-table :test 'equalp)))
    (multiple-value-bind (sentences pos-seqs)
	(extract-tagged-sentences test)
      (mapcar
       (lambda (sentence pos-seq)
         (format t "Tagging '~{~A ~}'~%" sentence)
         (let ((tags (tag-sentence sentence :debug nil)))
           ;;(format t "B: ~{~A ~}~%" pos-seq)
           ;;(format t "K: ~{~A ~}~%~%" tags)
           ;;(when (null (y-or-n-p "Continue? "))
             ;;(return-from hw-5.8 0))
           (mapcar (lambda (p1 p2)
                     (incf total-words)
                     (if (match? p1 p2)
                         (incf total-correct)
                         (let ((key (cons p1 p2)))
                           (incf error-count)
                           (if (numberp (gethash key errors))
                               (incf (gethash key errors))
                               (setf (gethash key errors) 1)))))
                   pos-seq tags)))
       sentences pos-seqs))
    (let ((error-report nil))
      (maphash (lambda (pair count)
                 (push (list pair count) error-report))
	       errors)
      (format t "Errors:~%")
      (dolist (r (sort error-report #'> :key 'second))
	(format t "  ~5A -> ~5A: ~,4F~%"
		(cdr (first r)) (car (first r))
		(* 100 (/ (second r) error-count)))))
    (/ total-correct total-words)))

(let ((accuracy nil))
  (dotimes (i 10)
    (format t "Randomizing data~%")
    (trivial-shell:shell-command "./make-sets.pl all.txt")
    (let ((start (get-universal-time))
	  (a (hw-5.8)))
      (push a accuracy)
      (format t "Time: ~F minutes~%" (/ (- (get-universal-time) start) 60))
      (format t "Accuracy: ~F~%" a)))
  (format t "Average accuracy: ~F~%" (/ (reduce #'+ accuracy) 10)))
