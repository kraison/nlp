("Dnx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "NP_r.b:<conj> = NP_f.t:<conj>
NP_r.b:<case> = NP_f.t:<case>
NP_r.b:<agr> = NP_f.t:<agr>
NP_r.b:<const> = D.t:<const>
NP_r.b:<definite> = D.t:<definite>
NP_r.b:<quan> = D.t:<quan>
NP_r.b:<card> = D.t:<card>
NP_r.b:<gen> = D.t:<gen>
NP_r.b:<compl> = D.t:<compl>
NP_r.b:<decreas> = D.t:<decreas>
NP_r.b:<wh> = D.t:<wh>
NP_f.t:<rel-clause> = -
NP_f.t:<gerund> = -
NP_f.t:<case> = nom/acc
NP_r.b:<compar> = -
NP_r.b:<conj> = and/or/nil
" :COMMENTS "Determiner tree for adjunction analysis of NPs/dets.  Replaces BetaDdx
that adjoined onto DetPs.  The <rel-clause> feature on NP_f prevents
determiners from adjoining above relative clauses.
" :SHAPE :NONE :BORDER-WIDTH 1 :CONSTRAINT-STYLE (:DUTCH :ITALIC :NORMAL) :CONNECTOR :LINE :DEFAULT-STYLE (:DUTCH :BOLD :NORMAL) :SUBSCRIPT-STYLE (:DUTCH :ROMAN :SMALL) :WHITE-SPACE 3  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "r"))) (((("D" . "")) :headp T))  (((("NP" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
("Nofnx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "NP_r.b:<conj> = NP_f.t:<conj>
NP_r.b:<case> = NP_f.t:<case>
D.b:<wh> = NP.t:<wh>
NP_r.b:<wh> = D.t:<wh>
NP_r.b:<agr> = NP_f.t:<agr>
NP_r.b:<const> = D.t:<const>
NP_r.b:<definite> = D.t:<definite>
NP_r.b:<quan> = D.t:<quan>
NP_r.b:<card> = D.t:<card>
NP_r.b:<gen> = D.t:<gen>
NP_r.b:<compl> = D.t:<compl>
NP_r.b:<decreas> = D.t:<decreas>
NP_f.t:<rel-clause> = -
NP_f.t:<gerund> = -
N.t:<agr> = NP.b:<agr>
N.t:<case> = NP.b:<case>
NP_f.t:<case> = nom/acc
N.t:<wh> = NP.b:<wh>
NP_r.b:<compar> = -
NP_f.t:<conj> = and/or/nil
" :COMMENTS "Partitive NP as complex determiner:
	most of her friend
	a group of her friends
" :SHAPE :NONE :BORDER-WIDTH 1 :CONSTRAINT-STYLE (:DUTCH :ITALIC :NORMAL) :CONNECTOR :LINE :DEFAULT-STYLE (:DUTCH :BOLD :NORMAL) :SUBSCRIPT-STYLE (:DUTCH :ROMAN :SMALL) :WHITE-SPACE 3  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "r")) :constraints "NA" :constraint-type :NA) (((("D" . ""))) (((("NP" . ""))) (((("N" . "")) :headp T)) )  (((("P" . ""))) (((("of" . "")))) ) )  (((("NP" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
("nxGnx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "NP.t:<case> = nom/acc
D.b:<wh> = NP.t:<wh>
D.b:<gen> = G.t:<gen>
G.b:<gen> = +
NP_r.b:<wh> = D.t:<wh>
NP_r.b:<agr> = NP_f.t:<agr>
NP_f.t:<conj> = NP_r.b:<conj>
NP_r.b:<definite> = D.t:<definite>
NP_r.b:<quan> = D.t:<quan>
NP_r.b:<card> = D.t:<card>
NP_r.b:<gen> = D.t:<gen>
NP_r.b:<compl> = D.t:<compl>
NP_r.b:<decreas> = D.t:<decreas>
NP_r.b:<case> = NP_f.t:<case>
NP_f.t:<case> = nom/acc
NP_f.t:<decreas> = -
NP_f.t:<definite> = -
NP_f.t:<card> = -
NP_f.t:<const> = -
NP_f.t:<gen> = -
NP_f.t:<quan> = -
NP_r.b:<compar> = -
NP_f.t:<gerund> = -
NP_f.t:<rel-clause> = -
NP_r.b:<conj> = and/or/nil
" :COMMENTS "Possessive \"'s\" on NP, which can adjoin to another DetP:

John's five dogs
" :SHAPE :NONE :BORDER-WIDTH 1 :CONSTRAINT-STYLE (:DUTCH :ITALIC :NORMAL) :CONNECTOR :LINE :DEFAULT-STYLE (:DUTCH :BOLD :NORMAL) :SUBSCRIPT-STYLE (:DUTCH :ROMAN :SMALL) :WHITE-SPACE 3  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "r"))) (((("D" . ""))) (((("NP" . "")) :substp T))  (((("G" . "")) :headp T)) )  (((("NP" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
("dD" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "D_r.b:<wh> = D_f.t:<wh>
D_r.b:<decreas> = D_f.t:<decreas>
D_r.b:<card> = D_f.t:<card>
D_r.b:<quan> = D_f.t:<quan>
D_r.b:<definite> = D_f.t:<definite>
D_r.b:<gen> = D_f.t:<gen>
D_r.b:<compl> = D_f.t:<compl>
D_r.b:<const> = D_f.t:<const>
D_r.b:<agr> = D.t:<agr>
D.t:<agr num> = plur
" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("D" . "r"))) (((("D" . "f")) :footp T :constraints "NA" :constraint-type :NA))  (((("D" . "")) :headp T)) ) 
("DDnx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "NP_r.b:<conj> = NP_f.t:<conj>
NP_r.b:<case> = NP_f.t:<case>
NP_r.b:<agr> = NP_f.t:<agr>
NP_r.b:<const> = D.t:<const>
NP_r.b:<definite> = D.t:<definite>
NP_r.b:<quan> = D.t:<quan>
NP_r.b:<card> = D.t:<card>
NP_r.b:<gen> = D.t:<gen>
NP_r.b:<compl> = D.t:<compl>
NP_r.b:<decreas> = D.t:<decreas>
NP_r.b:<wh> = D.t:<wh>
NP_f.t:<rel-clause> = -
NP_f.t:<case> = nom/acc
NP_r.b:<compar> = -
NP_f.t:<gerund> = -
NP_r.b:<conj> = and/or/nil

" :COMMENTS "Determiner tree for adjunction analysis of NPs/dets.  Replaces BetaDdx
that adjoined onto DetPs.  The <rel-clause> feature on NP_f prevents
determiners from adjoining above relative clauses.

This tree is used for multi-component determiners such as \"a few\" and \"many a\",
as in \"We had a few drops of rain in July, but not much more than that.\", and
\"Many a man has attempted this stunt, but none has succeeded.\"
" :SHAPE :NONE :BORDER-WIDTH 1 :CONSTRAINT-STYLE (:DUTCH :ITALIC :NORMAL) :CONNECTOR :LINE :DEFAULT-STYLE (:DUTCH :BOLD :NORMAL) :SUBSCRIPT-STYLE (:DUTCH :ROMAN :SMALL) :WHITE-SPACE 3  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "r"))) (((("D" . ""))) (((("D" . "1")) :headp T :constraints "NA" :constraint-type :NA))  (((("D" . "2")) :headp T :constraints "NA" :constraint-type :NA)) )  (((("NP" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
